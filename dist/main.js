(()=>{"use strict";var e={138:(e,t,d)=>{d.d(t,{IK:()=>a,TG:()=>o,iQ:()=>n});const n=(e="",t="",d="Low",n="No Due Date",a)=>({getTitle:()=>e,setTitle:t=>e=t,getDetails:()=>t,setDetails:e=>t=e,getPriority:()=>d,setPriority:e=>d=e,getDueDate:()=>n,setDueDate:e=>n=e,getStatus:()=>a,setStatus:e=>a=e}),a=e=>{let t=[];return{getTitle:()=>e,setTitle:t=>e=t,getTasks:()=>t,setTasks:e=>t=e,getTask:e=>t.find((t=>e===t.getTitle())),containsTask:e=>t.some((t=>e===t.getTitle())),addTask:e=>t.push(e),removeTask:e=>{t=t.filter((t=>e!==t.getTitle()))}}},o=()=>{let e=[];return{getProjects:()=>e,getProject:t=>e.find((e=>t===e.getTitle())),containsProject:t=>e.some((e=>t===e.getTitle())),addProject:t=>e.push(t),removeProject:t=>{e=e.filter((e=>t!==e.getTitle()))}}}},803:(e,t,d)=>{var n=d(138);const a=(0,n.TG)(),o=(0,n.IK)("Home"),i=(0,n.IK)("Today"),r=(0,n.IK)("This Week");a.addProject(o),a.addProject(i),a.addProject(r),document.getElementById("due-date").value=s();const l={};function s(){let e=new Date,t=String(e.getDate()).padStart(2,"0"),d=String(e.getMonth()+1).padStart(2,"0");return e.getFullYear()+"-"+d+"-"+t}function c(e){const t=e.target.parentNode.parentNode.parentNode.children[0].children[0].textContent;o.removeTask(t),e.target.parentNode.parentNode.parentNode.remove()}function u(e){const t=e.target.parentNode.parentNode.parentNode.children[0].children[0].textContent,d=o.getTask(t),n=d.getDueDate(),a=d.getPriority(),i=d.getDetails(),r=d.getStatus(),l=document.getElementById("edit-title"),s=document.getElementById("edit-due-date"),c=document.getElementById("edit-priority"),u=document.getElementById("edit-details"),m=document.getElementById("edit-status");l.value=t,s.value=n,c.value=a,u.value=i,m.checked="Not Complete"!=r}document.getElementById("submit-task").addEventListener("click",(e=>{e.preventDefault(),function(e){const t=document.querySelector(".tasks"),d=document.createElement("div"),n=document.createElement("div"),a=document.createElement("div"),i=document.createElement("div"),r=document.createElement("div"),s=document.createElement("div"),m=document.createElement("span"),g=document.createElement("div"),y=document.createElement("span");d.classList.add("task"),n.classList.add("first-task-elements"),a.classList.add("task-title"),i.classList.add("last-task-elements"),r.classList.add("task-due-date"),s.classList.add("task-edit"),m.classList.add("material-icons-outlined","edit-symbol"),m.dataset.modalTarget="#edit-modal",g.classList.add("task-delete"),y.classList.add("material-icons-outlined","delete-symbol"),"Complete"==e.getStatus()?(d.style.opacity=.5,d.style.borderColor="rgba(inherit, inherit, inherit, 0.5)"):(d.style.opacity=1,d.style.borderColor="rgba(inherit, inherit, inherit, 1)"),"low"==e.getPriority()?d.style.borderLeft="5px solid green":"medium"==e.getPriority()?d.style.borderLeft="5px solid orange":"high"==e.getPriority()&&(d.style.borderLeft="5px solid red"),a.textContent=e.getTitle(),r.textContent=e.getDueDate(),m.textContent="edit",y.textContent="delete",y.addEventListener("click",c),m.addEventListener("click",E),m.addEventListener("click",u),o.addTask(e),d.append(n,i),n.append(a),i.append(r,s,g),s.append(m),g.append(y),t.append(d),l[e]=d}(function(){const e=document.getElementById("title").value,t=document.getElementById("due-date").value,d=document.getElementById("priority").value,a=document.getElementById("details").value;let o;return o=document.getElementById("status").checked?"Complete":"Not Complete",(0,n.iQ)(e,a,d,t,o)}());const t=document.getElementById("new-task"),d=document.getElementById("due-date");t.reset(),d.value=s()})),document.getElementById("edit-task-submit").addEventListener("click",(e=>{e.preventDefault();const t=(d=document.getElementById("edit-title").value,o.getTask(d));var d;!function(e){const t=document.getElementById("edit-title").value,d=document.getElementById("edit-due-date").value,n=document.getElementById("edit-priority").value,a=document.getElementById("edit-details").value,o=document.getElementById("edit-status").checked;e.setTitle(t),e.setDueDate(d),e.setPriority(n),e.setDetails(a),o?e.setStatus("Complete"):e.setStatus("Not Complete")}(t),function(e){const t=l[e];t.children[0].children[0].textContent=e.getTitle(),t.children[1].children[0].textContent=e.getDueDate(),"low"==e.getPriority()?t.style.borderLeft="5px solid green":"medium"==e.getPriority()?t.style.borderLeft="5px solid orange":"high"==e.getPriority()&&(t.style.borderLeft="5px solid red"),"Complete"==e.getStatus()?(t.style.opacity=.5,t.style.borderColor="rgba(inherit, inherit, inherit, 0.5)"):"Not Complete"==e.getStatus()&&(t.style.opacity=1,t.style.borderColor="rgba(inherit, inherit, inherit, 1)")}(t)}));const m=document.querySelectorAll("[data-modal-target]"),g=document.querySelectorAll("[data-close-button]"),y=document.getElementById("overlay");function p(e){h(document.querySelector(e.target.dataset.modalTarget))}function v(e){var t;null!=(t=e.target.closest(".modal"))&&(t.classList.remove("active"),y.classList.remove("active"))}function E(e){h(document.querySelector(e.target.dataset.modalTarget))}function h(e){null!=e&&(e.classList.add("active"),y.classList.add("active"))}m.forEach((e=>{e.addEventListener("click",p)})),g.forEach((e=>{e.addEventListener("click",v)}))}},t={};function d(n){var a=t[n];if(void 0!==a)return a.exports;var o=t[n]={exports:{}};return e[n](o,o.exports,d),o.exports}d.d=(e,t)=>{for(var n in t)d.o(t,n)&&!d.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},d.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),d(138),d(803)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,